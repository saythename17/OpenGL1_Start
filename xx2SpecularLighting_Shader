  const char* vertexShaderCode = "#version 410 core\n"
			"layout (location = 0) in vec3 aPos;"
			"layout (location = 1) in vec2 aTexCoord;"
			"layout (location = 2) in vec3 aNormal;"
			"out vec2 TexCoord;"
			"out vec3 FragPos;"
			"out vec3 Normal;"
			"uniform mat4 model;"
			"uniform mat4 view;" 
			"uniform mat4 projection;"
			"void main(){"
			//clip V = projection M · view M · model M · object V
			/*Remever that the order of matrix multiplication is reversed(we need to read matrix multiplication from right to left. ←)*/
			"	gl_Position = projection * view * model * vec4(aPos, 1.0);"
			"	TexCoord = vec2(aTexCoord.x, aTexCoord.y);"
			"   FragPos = vec3(model * vec4(aPos, 1.0));"
			"	Normal = mat3(transpose(inverse(model))) * aNormal;"
			//inverse() is a costly operation for shader(since they have to be done on each vertex of the scene),
			//so try to avoid doing inverse in shader.
			//For an efficient application, we must calculate the normal matrix on the CPU and
			//send it to the shaders via uniform.(like mofel matrix)
			"}\0"; 
		const char* fragmentShaderCode = "#version 410 core\n"
			"out vec4 FragColor;"
			"in vec2 TexCoord;"
			"in vec3 FragPos;"
			"in vec3 Normal;"
			"uniform sampler2D texture1;"
			"uniform sampler2D texture2;"
			"uniform vec3 objectColor;"
			"uniform vec3 lightColor;"
			"uniform vec3 lightPos;"
			"uniform vec3 viewPos;"
			"void main() {"
			"	FragColor = mix(texture(texture1, TexCoord), texture(texture2, TexCoord), 0.5);"
			// ambient
			"	float ambientStrength = 0.3;"
			"   vec3 ambient = ambientStrength * lightColor;"
			// diffuse
			"   vec3 normal = normalize(Normal);"
			"	vec3 lightDir = normalize(lightPos - FragPos);"
			"	float diff = max(dot(normal, lightDir), 0.0);"
			"   vec3 diffuse = diff * lightColor;"
			//specular
			"   float specularStrength = 0.5;"
			"   vec3 viewDir = normalize(viewPos - FragPos);"
			"   vec3 reflectDir = reflect(-lightDir, normal);"
			/*-lightDir : we reverse its direction to get the correct reflect vector 
			* The reflect function expects the first vector to point from the light 
			* towards the fragment's position.(This depends on the order of subtraction earlier on
			* when we calculated the lightDir vector)*/
			"   float spec = pow(max(dot(viewDir, reflectDir), 0.0), 120);"//17 : shininess value
			"   vec3 specular = specularStrength * spec * lightColor;"
			"   vec3 result = (ambient + diffuse + specular) * objectColor;"
			"   FragColor *= vec4(result, 1.0);"
			"}\0";
