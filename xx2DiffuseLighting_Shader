		const char* vertexShaderCode = "#version 410 core\n"
			"layout (location = 0) in vec3 aPos;"
			"layout (location = 1) in vec2 aTexCoord;"
			"layout (location = 2) in vec3 aNormal;"
			"out vec2 TexCoord;"
			"out vec3 FragPos;"
			"out vec3 Normal;"
			"uniform mat4 model;"
			"uniform mat4 view;" 
			"uniform mat4 projection;"
			"void main(){"
			//clip V = projection M · view M · model M · object V
			/*Remever that the order of matrix multiplication is reversed(we need to read matrix multiplication from right to left. ←)*/
			"	gl_Position = projection * view * model * vec4(aPos, 1.0);"
			"	TexCoord = vec2(aTexCoord.x, aTexCoord.y);"
			"   FragPos = vec3(model * vec4(aPos, 1.0));"
			"	Normal = aNormal;"
			"}\0"; 
		const char* fragmentShaderCode = "#version 410 core\n"
			"out vec4 FragColor;"
			"in vec2 TexCoord;"
			"in vec3 FragPos;"
			"in vec3 Normal;"
			"uniform sampler2D texture1;"
			"uniform sampler2D texture2;"
			"uniform vec3 objectColor;"
			"uniform vec3 lightColor;"
			"uniform vec3 lightPos;"
			"void main() {"
			"	FragColor = mix(texture(texture1, TexCoord), texture(texture2, TexCoord), 0.5);"
			"	float ambientStrength = 0.3;"
			"   vec3 ambient = ambientStrength * lightColor;"
			"   vec3 normal = normalize(Normal);"
			"	vec3 lightDirection = normalize(lightPos - FragPos);"
			"	float diff = max(dot(normal, lightDirection), 0.0);"
			"   vec3 diffuse = diff * lightColor;"
			"   vec3 result = (ambient + diffuse) * objectColor;"
			"   FragColor *= vec4(result, 1.0);"
			"}\0";
